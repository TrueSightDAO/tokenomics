name: QR Code Batch Generation Webhook

on:
  # Trigger via repository_dispatch (external webhook)
  repository_dispatch:
    types: [qr-code-batch-generation]
  
  # Trigger via workflow_dispatch (manual trigger)
  workflow_dispatch:
    inputs:
      start_row:
        description: 'Start row number from Agroverse QR codes sheet'
        required: true
        type: number
      end_row:
        description: 'End row number from Agroverse QR codes sheet'
        required: true
        type: number
      zip_file_name:
        description: 'Name of the zip file to create'
        required: true
        type: string
      digital_signature:
        description: 'Digital signature of the requestor'
        required: false
        type: string
      requestor_email:
        description: 'Email address of the requestor'
        required: false
        type: string

env:
  PYTHON_VERSION: '3.9'

jobs:
  generate-batch-qr-codes:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout tokenomics repository (code)
      uses: actions/checkout@v4
      with:
        repository: TrueSightDAO/tokenomics
        token: ${{ secrets.GITHUB_TOKEN }}
        path: tokenomics
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd tokenomics/agroverse_qr_code_web_service
        pip install -r requirements.txt
    
    - name: Extract parameters from webhook
      id: extract-params
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "start_row=${{ github.event.client_payload.start_row }}" >> $GITHUB_OUTPUT
          echo "end_row=${{ github.event.client_payload.end_row }}" >> $GITHUB_OUTPUT
          echo "zip_file_name=${{ github.event.client_payload.zip_file_name }}" >> $GITHUB_OUTPUT
          echo "digital_signature=${{ github.event.client_payload.digital_signature || '' }}" >> $GITHUB_OUTPUT
          echo "requestor_email=${{ github.event.client_payload.requestor_email || '' }}" >> $GITHUB_OUTPUT
        else
          echo "start_row=${{ github.event.inputs.start_row }}" >> $GITHUB_OUTPUT
          echo "end_row=${{ github.event.inputs.end_row }}" >> $GITHUB_OUTPUT
          echo "zip_file_name=${{ github.event.inputs.zip_file_name }}" >> $GITHUB_OUTPUT
          echo "digital_signature=${{ github.event.inputs.digital_signature || '' }}" >> $GITHUB_OUTPUT
          echo "requestor_email=${{ github.event.inputs.requestor_email || '' }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate Batch QR Codes
      env:
        QR_CODE_REPOSITORY_TOKEN: ${{ secrets.QR_CODE_REPOSITORY_TOKEN }}
        GITHUB_REPOSITORY: TrueSightDAO/qr_codes
        GDRIVE_KEY: ${{ secrets.GDRIVE_KEY }}
      run: |
        # Change to the agroverse_qr_code_web_service directory
        cd tokenomics/agroverse_qr_code_web_service
        
        # Create a temporary script to handle batch processing
        cat > run_batch_webhook.sh << 'EOF'
        #!/bin/bash
        set -e
        
        START_ROW="$1"
        END_ROW="$2"
        ZIP_FILE_NAME="$3"
        DIGITAL_SIGNATURE="$4"
        REQUESTOR_EMAIL="$5"
        OUTPUT_FILE="$6"
        
        CMD="python batch_webhook_handler.py --start-row \"$START_ROW\" --end-row \"$END_ROW\" --zip-file-name \"$ZIP_FILE_NAME\" --output-file \"$OUTPUT_FILE\""
        
        if [ -n "$DIGITAL_SIGNATURE" ]; then
          CMD="$CMD --digital-signature \"$DIGITAL_SIGNATURE\""
        fi
        
        if [ -n "$REQUESTOR_EMAIL" ]; then
          CMD="$CMD --requestor-email \"$REQUESTOR_EMAIL\""
        fi
        
        echo "Running: $CMD"
        eval $CMD
        EOF
        
        chmod +x run_batch_webhook.sh
        
        # Run the batch webhook handler
        ./run_batch_webhook.sh \
          "${{ steps.extract-params.outputs.start_row }}" \
          "${{ steps.extract-params.outputs.end_row }}" \
          "${{ steps.extract-params.outputs.zip_file_name }}" \
          "${{ steps.extract-params.outputs.digital_signature }}" \
          "${{ steps.extract-params.outputs.requestor_email }}" \
          "batch_results.json"
        
        # Display results
        cat batch_results.json
    
    - name: Upload results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: batch-qr-code-results
        path: |
          tokenomics/agroverse_qr_code_web_service/batch_results.json
          tokenomics/agroverse_qr_code_web_service/generated_zip_files/
    
    - name: Send email notification
      if: steps.extract-params.outputs.requestor_email != ''
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('tokenomics/agroverse_qr_code_web_service/batch_results.json', 'utf8'));
          
          // This would typically use a service like SendGrid, Mailgun, or similar
          // For now, we'll just log the email details
          console.log('Email notification details:');
          console.log('To:', '${{ steps.extract-params.outputs.requestor_email }}');
          console.log('Subject: QR Code Batch Generation Complete');
          console.log('Body:', JSON.stringify(results, null, 2));
          
          // TODO: Implement actual email sending service
          // Example with SendGrid:
          // const sgMail = require('@sendgrid/mail');
          // sgMail.setApiKey(process.env.SENDGRID_API_KEY);
          // const msg = {
          //   to: '${{ steps.extract-params.outputs.requestor_email }}',
          //   from: 'noreply@truesight.me',
          //   subject: 'QR Code Batch Generation Complete',
          //   text: `Your QR code batch has been generated successfully. Zip file: ${results.zip_file_url}`,
          //   html: `<p>Your QR code batch has been generated successfully.</p><p><a href="${results.zip_file_url}">Download Zip File</a></p>`
          // };
          // await sgMail.send(msg);
