name: QR Code Generation Webhook

on:
  # Trigger via repository_dispatch (external webhook)
  repository_dispatch:
    types: [qr-code-generation]
  
  # Trigger via workflow_dispatch (manual trigger)
  workflow_dispatch:
    inputs:
      product_name:
        description: 'Product name to generate QR code for'
        required: true
        type: string
      landing_page_url:
        description: 'Landing page URL for the QR code'
        required: false
        type: string
      farm_name:
        description: 'Farm name for the QR code'
        required: false
        type: string
      state:
        description: 'State for the QR code'
        required: false
        type: string
      country:
        description: 'Country for the QR code'
        required: false
        type: string
      year:
        description: 'Year for the QR code'
        required: false
        type: string
      no_commit:
        description: 'Skip committing to repository'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.9'

jobs:
  generate-qr-code:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout tokenomics repository (code)
      uses: actions/checkout@v4
      with:
        repository: TrueSightDAO/tokenomics
        token: ${{ secrets.GITHUB_TOKEN }}
        path: tokenomics
    
    # No longer need to checkout qr_codes repository since we're using GitHub API
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install qrcode[pil] requests pillow
    
    - name: Extract product name from webhook
      id: extract-product
      run: |
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "product_name=${{ github.event.client_payload.product_name }}" >> $GITHUB_OUTPUT
          echo "landing_page_url=${{ github.event.client_payload.landing_page_url || '' }}" >> $GITHUB_OUTPUT
          echo "farm_name=${{ github.event.client_payload.farm_name || '' }}" >> $GITHUB_OUTPUT
          echo "state=${{ github.event.client_payload.state || '' }}" >> $GITHUB_OUTPUT
          echo "country=${{ github.event.client_payload.country || '' }}" >> $GITHUB_OUTPUT
          echo "year=${{ github.event.client_payload.year || '' }}" >> $GITHUB_OUTPUT
          echo "no_commit=${{ github.event.client_payload.no_commit || 'false' }}" >> $GITHUB_OUTPUT
        else
          echo "product_name=${{ github.event.inputs.product_name }}" >> $GITHUB_OUTPUT
          echo "landing_page_url=${{ github.event.inputs.landing_page_url || '' }}" >> $GITHUB_OUTPUT
          echo "farm_name=${{ github.event.inputs.farm_name || '' }}" >> $GITHUB_OUTPUT
          echo "state=${{ github.event.inputs.state || '' }}" >> $GITHUB_OUTPUT
          echo "country=${{ github.event.inputs.country || '' }}" >> $GITHUB_OUTPUT
          echo "year=${{ github.event.inputs.year || '' }}" >> $GITHUB_OUTPUT
          echo "no_commit=${{ github.event.inputs.no_commit || 'false' }}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate QR Code
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: TrueSightDAO/qr_codes
      run: |
        # Change to the agroverse_qr_code_web_service directory
        cd tokenomics/agroverse_qr_code_web_service
        
        # Create a temporary script to handle arguments properly
        cat > run_webhook.sh << 'EOF'
        #!/bin/bash
        set -e
        
        PRODUCT_NAME="$1"
        OUTPUT_FILE="$2"
        LANDING_PAGE_URL="$3"
        FARM_NAME="$4"
        STATE="$5"
        COUNTRY="$6"
        YEAR="$7"
        NO_COMMIT="$8"
        
        CMD="python github_webhook_handler.py \"$PRODUCT_NAME\" --output-file \"$OUTPUT_FILE\""
        
        if [ -n "$LANDING_PAGE_URL" ]; then
          CMD="$CMD --landing-page-url \"$LANDING_PAGE_URL\""
        fi
        
        if [ -n "$FARM_NAME" ]; then
          CMD="$CMD --farm-name \"$FARM_NAME\""
        fi
        
        if [ -n "$STATE" ]; then
          CMD="$CMD --state \"$STATE\""
        fi
        
        if [ -n "$COUNTRY" ]; then
          CMD="$CMD --country \"$COUNTRY\""
        fi
        
        if [ -n "$YEAR" ]; then
          CMD="$CMD --year \"$YEAR\""
        fi
        
        if [ "$NO_COMMIT" = "true" ]; then
          CMD="$CMD --no-commit"
        fi
        
        echo "Running: $CMD"
        eval $CMD
        EOF
        
        chmod +x run_webhook.sh
        
        # Run the webhook handler
        ./run_webhook.sh \
          "${{ steps.extract-product.outputs.product_name }}" \
          "results.json" \
          "${{ steps.extract-product.outputs.landing_page_url }}" \
          "${{ steps.extract-product.outputs.farm_name }}" \
          "${{ steps.extract-product.outputs.state }}" \
          "${{ steps.extract-product.outputs.country }}" \
          "${{ steps.extract-product.outputs.year }}" \
          "${{ steps.extract-product.outputs.no_commit }}"
        
        # Display results
        cat results.json
    
    - name: Upload results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: qr-code-results
        path: tokenomics/agroverse_qr_code_web_service/results.json
    
    - name: Comment on issue (if triggered from issue)
      if: github.event_name == 'repository_dispatch' && github.event.client_payload.issue_number
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const results = JSON.parse(fs.readFileSync('tokenomics/agroverse_qr_code_web_service/results.json', 'utf8'));
          
          let comment = `## QR Code Generation Results\n\n`;
          
          if (results.success) {
            comment += `✅ **Success!** QR code generated for product: \`${results.product.product_name}\`\n\n`;
            comment += `**QR Code:** \`${results.qr_code}\`\n`;
            comment += `**GitHub URL:** ${results.github_url}\n`;
            comment += `**Sheet Row:** ${results.row_added}\n`;
            comment += `**Timestamp:** ${results.timestamp}\n`;
          } else {
            comment += `❌ **Error:** ${results.error}\n\n`;
            comment += `**Product:** ${results.product_name}\n`;
            comment += `**Timestamp:** ${results.timestamp}\n`;
          }
          
          github.rest.issues.createComment({
            issue_number: ${{ github.event.client_payload.issue_number }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
